// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends EthereumEvent {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchTransfer extends EthereumEvent {
  get params(): BatchTransfer__Params {
    return new BatchTransfer__Params(this);
  }
}

export class BatchTransfer__Params {
  _event: BatchTransfer;

  constructor(event: BatchTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenTypes(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class Composition extends EthereumEvent {
  get params(): Composition__Params {
    return new Composition__Params(this);
  }
}

export class Composition__Params {
  _event: Composition;

  constructor(event: Composition) {
    this._event = event;
  }

  get portfolioId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get tokenRatio(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class RegistrySet extends EthereumEvent {
  get params(): RegistrySet__Params {
    return new RegistrySet__Params(this);
  }
}

export class RegistrySet__Params {
  _event: RegistrySet;

  constructor(event: RegistrySet) {
    this._event = event;
  }

  get registry(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferWithQuantity extends EthereumEvent {
  get params(): TransferWithQuantity__Params {
    return new TransferWithQuantity__Params(this);
  }
}

export class TransferWithQuantity__Params {
  _event: TransferWithQuantity;

  constructor(event: TransferWithQuantity) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenMinter__tokensOwnedResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigIntArray(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class TokenMinter extends SmartContract {
  static bind(address: Address): TokenMinter {
    return new TokenMinter("TokenMinter", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call("DOMAIN_SEPARATOR", []);

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): CallResult<Bytes> {
    let result = super.tryCall("DOMAIN_SEPARATOR", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call("PERMIT_TYPEHASH", []);

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): CallResult<Bytes> {
    let result = super.tryCall("PERMIT_TYPEHASH", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(_address: Address, _tokenId: BigInt): BigInt {
    let result = super.call("balanceOf", [
      EthereumValue.fromAddress(_address),
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_address: Address, _tokenId: BigInt): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(_address),
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(_owner: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_owner)]);

    return result[0].toBigInt();
  }

  try_balanceOf1(_owner: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  exists(_tokenId: BigInt): boolean {
    let result = super.call("exists", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_tokenId: BigInt): CallResult<boolean> {
    let result = super.tryCall("exists", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): CallResult<Address> {
    let result = super.tryCall("getApproved", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getApproved1(_tokenId: BigInt, _tokenOwner: Address): Address {
    let result = super.call("getApproved", [
      EthereumValue.fromUnsignedBigInt(_tokenId),
      EthereumValue.fromAddress(_tokenOwner)
    ]);

    return result[0].toAddress();
  }

  try_getApproved1(
    _tokenId: BigInt,
    _tokenOwner: Address
  ): CallResult<Address> {
    let result = super.tryCall("getApproved", [
      EthereumValue.fromUnsignedBigInt(_tokenId),
      EthereumValue.fromAddress(_tokenOwner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getRegistry(): Address {
    let result = super.call("getRegistry", []);

    return result[0].toAddress();
  }

  try_getRegistry(): CallResult<Address> {
    let result = super.tryCall("getRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  implementsERC721(): boolean {
    let result = super.call("implementsERC721", []);

    return result[0].toBoolean();
  }

  try_implementsERC721(): CallResult<boolean> {
    let result = super.tryCall("implementsERC721", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  implementsERC721O(): boolean {
    let result = super.call("implementsERC721O", []);

    return result[0].toBoolean();
  }

  try_implementsERC721O(): CallResult<boolean> {
    let result = super.tryCall("implementsERC721O", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call("isApprovedForAll", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromAddress(_operator)
    ]);

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): CallResult<boolean> {
    let result = super.tryCall("isApprovedForAll", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromAddress(_operator)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", [EthereumValue.fromAddress(param0)]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): CallResult<BigInt> {
    let result = super.tryCall("nonces", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): CallResult<Address> {
    let result = super.tryCall("ownerOf", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): CallResult<boolean> {
    let result = super.tryCall("supportsInterface", [
      EthereumValue.fromFixedBytes(interfaceId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  tokenByIndex(_index: BigInt): BigInt {
    let result = super.call("tokenByIndex", [
      EthereumValue.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(_index: BigInt): CallResult<BigInt> {
    let result = super.tryCall("tokenByIndex", [
      EthereumValue.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call("tokenOfOwnerByIndex", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(_owner: Address, _index: BigInt): CallResult<BigInt> {
    let result = super.tryCall("tokenOfOwnerByIndex", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): CallResult<string> {
    let result = super.tryCall("tokenURI", [
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  tokensOwned(_owner: Address): TokenMinter__tokensOwnedResult {
    let result = super.call("tokensOwned", [EthereumValue.fromAddress(_owner)]);

    return new TokenMinter__tokensOwnedResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_tokensOwned(_owner: Address): CallResult<TokenMinter__tokensOwnedResult> {
    let result = super.tryCall("tokensOwned", [
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new TokenMinter__tokensOwnedResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  isApprovedOrOwner(
    _spender: Address,
    _owner: Address,
    _tokenId: BigInt
  ): boolean {
    let result = super.call("isApprovedOrOwner", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    _spender: Address,
    _owner: Address,
    _tokenId: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("isApprovedOrOwner", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isOpiumSpender(_spender: Address): boolean {
    let result = super.call("isOpiumSpender", [
      EthereumValue.fromAddress(_spender)
    ]);

    return result[0].toBoolean();
  }

  try_isOpiumSpender(_spender: Address): CallResult<boolean> {
    let result = super.tryCall("isOpiumSpender", [
      EthereumValue.fromAddress(_spender)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _baseTokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _registry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchTransferFromCall extends EthereumCall {
  get inputs(): BatchTransferFromCall__Inputs {
    return new BatchTransferFromCall__Inputs(this);
  }

  get outputs(): BatchTransferFromCall__Outputs {
    return new BatchTransferFromCall__Outputs(this);
  }
}

export class BatchTransferFromCall__Inputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class BatchTransferFromCall__Outputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }
}

export class ComposeCall extends EthereumCall {
  get inputs(): ComposeCall__Inputs {
    return new ComposeCall__Inputs(this);
  }

  get outputs(): ComposeCall__Outputs {
    return new ComposeCall__Outputs(this);
  }
}

export class ComposeCall__Inputs {
  _call: ComposeCall;

  constructor(call: ComposeCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _tokenRatio(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ComposeCall__Outputs {
  _call: ComposeCall;

  constructor(call: ComposeCall) {
    this._call = call;
  }
}

export class DecomposeCall extends EthereumCall {
  get inputs(): DecomposeCall__Inputs {
    return new DecomposeCall__Inputs(this);
  }

  get outputs(): DecomposeCall__Outputs {
    return new DecomposeCall__Outputs(this);
  }
}

export class DecomposeCall__Inputs {
  _call: DecomposeCall;

  constructor(call: DecomposeCall) {
    this._call = call;
  }

  get _portfolioId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _tokenRatio(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DecomposeCall__Outputs {
  _call: DecomposeCall;

  constructor(call: DecomposeCall) {
    this._call = call;
  }
}

export class PermitCall extends EthereumCall {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get _holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _allowed(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RecomposeCall extends EthereumCall {
  get inputs(): RecomposeCall__Inputs {
    return new RecomposeCall__Inputs(this);
  }

  get outputs(): RecomposeCall__Outputs {
    return new RecomposeCall__Outputs(this);
  }
}

export class RecomposeCall__Inputs {
  _call: RecomposeCall;

  constructor(call: RecomposeCall) {
    this._call = call;
  }

  get _portfolioId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _initialTokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _initialTokenRatio(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _finalTokenIds(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _finalTokenRatio(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RecomposeCall__Outputs {
  _call: RecomposeCall;

  constructor(call: RecomposeCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends EthereumCall {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFrom1Call extends EthereumCall {
  get inputs(): SafeBatchTransferFrom1Call__Inputs {
    return new SafeBatchTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeBatchTransferFrom1Call__Outputs {
    return new SafeBatchTransferFrom1Call__Outputs(this);
  }
}

export class SafeBatchTransferFrom1Call__Inputs {
  _call: SafeBatchTransferFrom1Call;

  constructor(call: SafeBatchTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class SafeBatchTransferFrom1Call__Outputs {
  _call: SafeBatchTransferFrom1Call;

  constructor(call: SafeBatchTransferFrom1Call) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends EthereumCall {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends EthereumCall {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SafeTransferFrom2Call extends EthereumCall {
  get inputs(): SafeTransferFrom2Call__Inputs {
    return new SafeTransferFrom2Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom2Call__Outputs {
    return new SafeTransferFrom2Call__Outputs(this);
  }
}

export class SafeTransferFrom2Call__Inputs {
  _call: SafeTransferFrom2Call;

  constructor(call: SafeTransferFrom2Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom2Call__Outputs {
  _call: SafeTransferFrom2Call;

  constructor(call: SafeTransferFrom2Call) {
    this._call = call;
  }
}

export class SafeTransferFrom3Call extends EthereumCall {
  get inputs(): SafeTransferFrom3Call__Inputs {
    return new SafeTransferFrom3Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom3Call__Outputs {
    return new SafeTransferFrom3Call__Outputs(this);
  }
}

export class SafeTransferFrom3Call__Inputs {
  _call: SafeTransferFrom3Call;

  constructor(call: SafeTransferFrom3Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFrom3Call__Outputs {
  _call: SafeTransferFrom3Call;

  constructor(call: SafeTransferFrom3Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends EthereumCall {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferFrom1Call extends EthereumCall {
  get inputs(): TransferFrom1Call__Inputs {
    return new TransferFrom1Call__Inputs(this);
  }

  get outputs(): TransferFrom1Call__Outputs {
    return new TransferFrom1Call__Outputs(this);
  }
}

export class TransferFrom1Call__Inputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFrom1Call__Outputs {
  _call: TransferFrom1Call;

  constructor(call: TransferFrom1Call) {
    this._call = call;
  }
}

export class MintCall extends EthereumCall {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _seller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _derivativeHash(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class Mint1Call extends EthereumCall {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get _buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _derivativeHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }
}

export class BurnCall extends EthereumCall {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}
