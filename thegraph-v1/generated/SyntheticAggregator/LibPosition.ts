// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LibPosition extends ethereum.SmartContract {
  static bind(address: Address): LibPosition {
    return new LibPosition("LibPosition", address);
  }

  getLongTokenId(_hash: Bytes): BigInt {
    let result = super.call(
      "getLongTokenId",
      "getLongTokenId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_hash)]
    );

    return result[0].toBigInt();
  }

  try_getLongTokenId(_hash: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLongTokenId",
      "getLongTokenId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getShortTokenId(_hash: Bytes): BigInt {
    let result = super.call(
      "getShortTokenId",
      "getShortTokenId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_hash)]
    );

    return result[0].toBigInt();
  }

  try_getShortTokenId(_hash: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getShortTokenId",
      "getShortTokenId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
